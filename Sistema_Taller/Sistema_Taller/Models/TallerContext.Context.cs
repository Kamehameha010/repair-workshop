

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Sistema_Taller.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class Taller_SysEntities : DbContext
{
    public Taller_SysEntities()
        : base("name=Taller_SysEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Articulo> Articulo { get; set; }

    public virtual DbSet<Caso> Caso { get; set; }

    public virtual DbSet<CasoDetalle> CasoDetalle { get; set; }

    public virtual DbSet<Categoria> Categoria { get; set; }

    public virtual DbSet<Estado> Estado { get; set; }

    public virtual DbSet<EstadoCaso> EstadoCaso { get; set; }

    public virtual DbSet<Factura> Factura { get; set; }

    public virtual DbSet<Factura_Detalle> Factura_Detalle { get; set; }

    public virtual DbSet<InventarioRepuesto> InventarioRepuesto { get; set; }

    public virtual DbSet<Marca> Marca { get; set; }

    public virtual DbSet<Modulo> Modulo { get; set; }

    public virtual DbSet<Operacion> Operacion { get; set; }

    public virtual DbSet<ProveedorRepuesto> ProveedorRepuesto { get; set; }

    public virtual DbSet<RepuestoUsado> RepuestoUsado { get; set; }

    public virtual DbSet<Rol> Rol { get; set; }

    public virtual DbSet<Rol_Operacion> Rol_Operacion { get; set; }

    public virtual DbSet<Usuario> Usuario { get; set; }

    public virtual DbSet<View_Caso> View_Caso { get; set; }

    public virtual DbSet<View_Repuesto> View_Repuesto { get; set; }

    public virtual DbSet<View_Usuario> View_Usuario { get; set; }

    public virtual DbSet<Cliente> Cliente { get; set; }

    public virtual DbSet<Empresa> Empresa { get; set; }

    public virtual DbSet<View_Cliente> View_Cliente { get; set; }


    public virtual int Sp_AddCaso(Nullable<int> numeroCaso, Nullable<int> idUsuario, Nullable<int> idCliente)
    {

        var numeroCasoParameter = numeroCaso.HasValue ?
            new ObjectParameter("numeroCaso", numeroCaso) :
            new ObjectParameter("numeroCaso", typeof(int));


        var idUsuarioParameter = idUsuario.HasValue ?
            new ObjectParameter("idUsuario", idUsuario) :
            new ObjectParameter("idUsuario", typeof(int));


        var idClienteParameter = idCliente.HasValue ?
            new ObjectParameter("idCliente", idCliente) :
            new ObjectParameter("idCliente", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddCaso", numeroCasoParameter, idUsuarioParameter, idClienteParameter);
    }


    public virtual int Sp_AddCliente(string nombre, string apellidos, Nullable<int> cedula, string telefono, string correo)
    {

        var nombreParameter = nombre != null ?
            new ObjectParameter("nombre", nombre) :
            new ObjectParameter("nombre", typeof(string));


        var apellidosParameter = apellidos != null ?
            new ObjectParameter("apellidos", apellidos) :
            new ObjectParameter("apellidos", typeof(string));


        var cedulaParameter = cedula.HasValue ?
            new ObjectParameter("cedula", cedula) :
            new ObjectParameter("cedula", typeof(int));


        var telefonoParameter = telefono != null ?
            new ObjectParameter("telefono", telefono) :
            new ObjectParameter("telefono", typeof(string));


        var correoParameter = correo != null ?
            new ObjectParameter("correo", correo) :
            new ObjectParameter("correo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddCliente", nombreParameter, apellidosParameter, cedulaParameter, telefonoParameter, correoParameter);
    }


    public virtual int sp_ActCliente(Nullable<int> idCliente, string nombre, string apellidos, Nullable<int> cedula, string telefono, string correo)
    {

        var idClienteParameter = idCliente.HasValue ?
            new ObjectParameter("idCliente", idCliente) :
            new ObjectParameter("idCliente", typeof(int));


        var nombreParameter = nombre != null ?
            new ObjectParameter("nombre", nombre) :
            new ObjectParameter("nombre", typeof(string));


        var apellidosParameter = apellidos != null ?
            new ObjectParameter("apellidos", apellidos) :
            new ObjectParameter("apellidos", typeof(string));


        var cedulaParameter = cedula.HasValue ?
            new ObjectParameter("cedula", cedula) :
            new ObjectParameter("cedula", typeof(int));


        var telefonoParameter = telefono != null ?
            new ObjectParameter("telefono", telefono) :
            new ObjectParameter("telefono", typeof(string));


        var correoParameter = correo != null ?
            new ObjectParameter("correo", correo) :
            new ObjectParameter("correo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActCliente", idClienteParameter, nombreParameter, apellidosParameter, cedulaParameter, telefonoParameter, correoParameter);
    }

}

}

